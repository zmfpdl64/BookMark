# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches: [ "main" ]
# env:
#   SECRET_KEY_SOURCE: ${{ secrets.SECRET_KEY_SOURCE }}  

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Set Yaml
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml
      env:
        spring.datasource.url: ${{ secrets.DB_URL }}
        spring.datasource.username: ${{ secrets.DB_PASSWORD }}
        spring.datasource.password: ${{ secrets.DB_PASSWORD }}
        spring.security.oauth2.client.registration.google.client-id: ${{ secrets.CLIENT_ID }}
        spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.CLIENT_SECRET }}
        spring.security.oauth2.client.registration.google.redirect-uri: ${{ secrets.REDIRECT_URI }}

    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew bootJar
     
          ## 도커 이미지 빌드 후 도커허브에 push하기
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} -f Dockerfile .
        docker push ${{ secrets.DOCKER_REPO }}


    ## 서버에 접속하여 도커 이미지를 pull 받고 실행하기
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.UBUNTU_USERNAME }}
        password: ${{ secrets.UBUNTU_PASSWORD }}
        port: 22
        script: |
           su - ${{ secrets.UBUNTU_MASTER_USERNAME }}
           ${{ secrets.UBUNTU_MASTER_PASSWORD }}
           sudo docker stop $(sudo docker ps -q)
           sudo docker rm prod-server
           sudo docker image rm ${{ secrets.DOCKER_REPO }}
           sudo docker pull ${{ secrets.DOCKER_REPO }}
           sudo docker run -d -p 8080:8080 -p 8088:8088 ${{ secrets.DOCKER_REPO }}
